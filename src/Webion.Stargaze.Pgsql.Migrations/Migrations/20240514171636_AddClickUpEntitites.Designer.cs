// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Webion.Stargaze.Pgsql;

#nullable disable

namespace Webion.Stargaze.Pgsql.Migrations.Migrations
{
    [DbContext(typeof(StargazeDbContext))]
    [Migration("20240514171636_AddClickUpEntitites")]
    partial class AddClickUpEntitites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.BankAccountDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_bank_account");

                    b.ToTable("bank_account", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("EmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("emitted_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("IssuedById")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_by_id");

                    b.Property<Guid?>("IssuedToId")
                        .HasColumnType("uuid")
                        .HasColumnName("issued_to_id");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("net_price");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean")
                        .HasColumnName("paid");

                    b.Property<decimal>("TaxedPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("taxed_price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<decimal>("VatPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_percentage");

                    b.HasKey("Id")
                        .HasName("pk_invoice");

                    b.HasIndex("IssuedById")
                        .HasDatabaseName("ix_invoice_issued_by_id");

                    b.HasIndex("IssuedToId")
                        .HasDatabaseName("ix_invoice_issued_to_id");

                    b.ToTable("invoice", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceItemDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("net_price");

                    b.Property<decimal>("TaxedPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("taxed_price");

                    b.Property<decimal>("TotalUnits")
                        .HasColumnType("numeric")
                        .HasColumnName("total_units");

                    b.Property<decimal>("VatPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_percentage");

                    b.HasKey("Id")
                        .HasName("pk_invoice_item");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_invoice_item_invoice_id");

                    b.ToTable("invoice_item", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.PaymentCategoryDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_payment_category");

                    b.ToTable("payment_category", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.PaymentDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_account_id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("net_amount");

                    b.Property<DateTimeOffset>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<decimal>("TaxedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("taxed_amount");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<decimal>("VatPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("vat_percentage");

                    b.HasKey("Id")
                        .HasName("pk_payment");

                    b.HasIndex("BankAccountId")
                        .HasDatabaseName("ix_payment_bank_account_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_payment_category_id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_payment_invoice_id");

                    b.ToTable("payment", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.TimeEntryInvoiceDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("BilledTime")
                        .HasColumnType("interval")
                        .HasColumnName("billed_time");

                    b.Property<Guid>("TimeEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_entry_id");

                    b.Property<Guid>("TimeInvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_invoice_id");

                    b.HasKey("Id")
                        .HasName("pk_time_entry_invoice");

                    b.HasIndex("TimeEntryId")
                        .HasDatabaseName("ix_time_entry_invoice_time_entry_id");

                    b.HasIndex("TimeInvoiceId")
                        .HasDatabaseName("ix_time_entry_invoice_time_invoice_id");

                    b.ToTable("time_entry_invoice", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.TimeInvoiceDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<TimeSpan>("InvoicedTime")
                        .HasColumnType("interval")
                        .HasColumnName("invoiced_time");

                    b.Property<Guid>("TimePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_package_id");

                    b.HasKey("Id")
                        .HasName("pk_time_invoice");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_time_invoice_invoice_id");

                    b.HasIndex("TimePackageId")
                        .HasDatabaseName("ix_time_invoice_time_package_id");

                    b.ToTable("time_invoice", "accounting");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpFolderDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("space_id");

                    b.HasKey("Id")
                        .HasName("pk_folder");

                    b.HasIndex("SpaceId")
                        .HasDatabaseName("ix_folder_space_id");

                    b.ToTable("folder", "click_up");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpListDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FolderId")
                        .HasColumnType("text")
                        .HasColumnName("folder_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SpaceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("space_id");

                    b.HasKey("Id")
                        .HasName("pk_list");

                    b.HasIndex("FolderId")
                        .HasDatabaseName("ix_list_folder_id");

                    b.HasIndex("SpaceId")
                        .HasDatabaseName("ix_list_space_id");

                    b.ToTable("list", "click_up");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpSpaceDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_space");

                    b.ToTable("space", "click_up");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTaskDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ListId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("list_id");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_task");

                    b.HasIndex("ListId")
                        .HasDatabaseName("ix_task_list_id");

                    b.HasIndex("TaskId")
                        .IsUnique()
                        .HasDatabaseName("ix_task_task_id");

                    b.ToTable("task", "click_up");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTimeEntryDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("TaskId")
                        .HasColumnType("text")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_time_entry");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_time_entry_task_id");

                    b.ToTable("time_entry", "click_up");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Connect.ApiKeyDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<byte[]>("Secret")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("bytea")
                        .HasColumnName("secret");

                    b.HasKey("Id")
                        .HasName("pk_api_key");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_api_key_client_id");

                    b.ToTable("api_key", "connect");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Connect.ClientDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Secret")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("bytea")
                        .HasColumnName("secret");

                    b.HasKey("Id")
                        .HasName("pk_client");

                    b.ToTable("client", "connect");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Connect.RefreshTokenDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<byte[]>("Secret")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("bytea")
                        .HasColumnName("secret");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_token_user_id");

                    b.ToTable("refresh_token", "connect");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Core.CompanyDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_company");

                    b.ToTable("company", "core");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.RoleClaimDbo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claim_role_id");

                    b.ToTable("role_claim", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.RoleDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserClaimDbo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("user_claim", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserLoginDbo", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_user_id");

                    b.ToTable("user_login", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserRoleDbo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserTokenDbo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", "identity");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Media.FileDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.ToTable("file", "media");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Projects.ProjectDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_project_company_id");

                    b.ToTable("project", "projects");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Projects.TaskDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_task");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_task_project_id");

                    b.ToTable("task", "projects");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimeEntryDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Billable")
                        .HasColumnType("boolean")
                        .HasColumnName("billable");

                    b.Property<bool>("Billed")
                        .HasColumnType("boolean")
                        .HasColumnName("billed");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean")
                        .HasColumnName("paid");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_time_entry");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_time_entry_task_id1");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_time_entry_user_id");

                    b.ToTable("time_entry", "time_tracking");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<int>("Hours")
                        .HasColumnType("integer")
                        .HasColumnName("hours");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_time_package");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_time_package_company_id");

                    b.ToTable("time_package", "time_tracking");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageRateDbo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric")
                        .HasColumnName("rate");

                    b.Property<Guid>("TimePackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_package_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_time_package_rate");

                    b.HasIndex("TimePackageId")
                        .HasDatabaseName("ix_time_package_rate_time_package_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_time_package_rate_user_id");

                    b.ToTable("time_package_rate", "time_tracking");
                });

            modelBuilder.Entity("click_up_project_list", b =>
                {
                    b.Property<string>("ClickUpListsId")
                        .HasColumnType("text")
                        .HasColumnName("click_up_lists_id");

                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uuid")
                        .HasColumnName("projects_id");

                    b.HasKey("ClickUpListsId", "ProjectsId")
                        .HasName("pk_click_up_project_list");

                    b.HasIndex("ProjectsId")
                        .HasDatabaseName("ix_click_up_project_list_projects_id");

                    b.ToTable("click_up_project_list", (string)null);
                });

            modelBuilder.Entity("invoice_document", b =>
                {
                    b.Property<Guid>("DocumentsId")
                        .HasColumnType("uuid")
                        .HasColumnName("documents_id");

                    b.Property<Guid>("InvoiceDboId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_dbo_id");

                    b.HasKey("DocumentsId", "InvoiceDboId")
                        .HasName("pk_invoice_document");

                    b.HasIndex("InvoiceDboId")
                        .HasDatabaseName("ix_invoice_document_invoice_dbo_id");

                    b.ToTable("invoice_document", (string)null);
                });

            modelBuilder.Entity("time_package_project", b =>
                {
                    b.Property<Guid>("AppliesToId")
                        .HasColumnType("uuid")
                        .HasColumnName("applies_to_id");

                    b.Property<Guid>("TimePackagesId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_packages_id");

                    b.HasKey("AppliesToId", "TimePackagesId")
                        .HasName("pk_time_package_project");

                    b.HasIndex("TimePackagesId")
                        .HasDatabaseName("ix_time_package_project_time_packages_id");

                    b.ToTable("time_package_project", (string)null);
                });

            modelBuilder.Entity("user_task", b =>
                {
                    b.Property<Guid>("AssigneesId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignees_id");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uuid")
                        .HasColumnName("tasks_id");

                    b.HasKey("AssigneesId", "TasksId")
                        .HasName("pk_user_task");

                    b.HasIndex("TasksId")
                        .HasDatabaseName("ix_user_task_tasks_id");

                    b.ToTable("user_task", (string)null);
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Core.CompanyDbo", "IssuedBy")
                        .WithMany("IssuedInvoices")
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_invoice_companies_issued_by_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Core.CompanyDbo", "IssuedTo")
                        .WithMany("ReceivedInvoices")
                        .HasForeignKey("IssuedToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_invoice_companies_issued_to_id");

                    b.Navigation("IssuedBy");

                    b.Navigation("IssuedTo");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceItemDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_item_invoice_invoice_id");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.PaymentDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.BankAccountDbo", "BankAccount")
                        .WithMany("Payments")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_payment_bank_account_bank_account_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.PaymentCategoryDbo", "Category")
                        .WithMany("Payments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_payment_payment_category_category_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_payment_invoice_invoice_id");

                    b.Navigation("BankAccount");

                    b.Navigation("Category");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.TimeEntryInvoiceDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimeEntryDbo", "TimeEntry")
                        .WithMany("Bills")
                        .HasForeignKey("TimeEntryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_entry_invoice_time_entries_time_entry_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.TimeInvoiceDbo", "TimeInvoice")
                        .WithMany("BilledEntries")
                        .HasForeignKey("TimeInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_entry_invoice_time_invoice_dbo_time_invoice_id");

                    b.Navigation("TimeEntry");

                    b.Navigation("TimeInvoice");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.TimeInvoiceDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", "Invoice")
                        .WithMany("TimeInvoices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_invoice_invoice_invoice_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageDbo", "HourlyPackage")
                        .WithMany("Invoices")
                        .HasForeignKey("TimePackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_invoice_time_packages_time_package_id");

                    b.Navigation("HourlyPackage");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpFolderDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpSpaceDbo", "Space")
                        .WithMany("Folders")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_folder_click_up_spaces_space_id");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpListDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpFolderDbo", "Folder")
                        .WithMany("Lists")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_list_folder_folder_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpSpaceDbo", "Space")
                        .WithMany("Lists")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_list_click_up_spaces_space_id");

                    b.Navigation("Folder");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTaskDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpListDbo", "List")
                        .WithMany("Tasks")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_list_list_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Projects.TaskDbo", "Task")
                        .WithOne("ClickUpTask")
                        .HasForeignKey("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTaskDbo", "TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_task_tasks_task_id");

                    b.Navigation("List");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTimeEntryDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTaskDbo", "ClickUpTask")
                        .WithMany("ClickUpTimeEntries")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_time_entry_task_task_id");

                    b.Navigation("ClickUpTask");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Connect.ApiKeyDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Connect.ClientDbo", "Client")
                        .WithMany("ApiKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_key_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Connect.RefreshTokenDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_token_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.RoleClaimDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.RoleDbo", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claim_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserClaimDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claim_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserLoginDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserRoleDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.RoleDbo", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserTokenDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Projects.ProjectDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Core.CompanyDbo", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_project_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Projects.TaskDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Projects.ProjectDbo", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_task_project_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimeEntryDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Projects.TaskDbo", "Task")
                        .WithMany("TimeEntries")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_time_entry_task_task_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany("TimeEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_entry_user_user_id");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Core.CompanyDbo", "Company")
                        .WithMany("TimePackages")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_package_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageRateDbo", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageDbo", "TimePackage")
                        .WithMany("Rates")
                        .HasForeignKey("TimePackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_package_rate_time_package_time_package_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", "User")
                        .WithMany("TimePackageRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_time_package_rate_user_user_id");

                    b.Navigation("TimePackage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("click_up_project_list", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpListDbo", null)
                        .WithMany()
                        .HasForeignKey("ClickUpListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_click_up_project_list_list_click_up_lists_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Projects.ProjectDbo", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_click_up_project_list_projects_projects_id");
                });

            modelBuilder.Entity("invoice_document", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Media.FileDbo", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_document_file_dbo_documents_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", null)
                        .WithMany()
                        .HasForeignKey("InvoiceDboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_document_invoice_invoice_dbo_id");
                });

            modelBuilder.Entity("time_package_project", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Projects.ProjectDbo", null)
                        .WithMany()
                        .HasForeignKey("AppliesToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_time_package_project_project_applies_to_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageDbo", null)
                        .WithMany()
                        .HasForeignKey("TimePackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_time_package_project_time_package_time_packages_id");
                });

            modelBuilder.Entity("user_task", b =>
                {
                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", null)
                        .WithMany()
                        .HasForeignKey("AssigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_task_user_assignees_id");

                    b.HasOne("Webion.Stargaze.Pgsql.Entities.Projects.TaskDbo", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_task_task_tasks_id");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.BankAccountDbo", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.InvoiceDbo", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("TimeInvoices");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.PaymentCategoryDbo", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Accounting.TimeInvoiceDbo", b =>
                {
                    b.Navigation("BilledEntries");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpFolderDbo", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpListDbo", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpSpaceDbo", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Lists");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.ClickUp.ClickUpTaskDbo", b =>
                {
                    b.Navigation("ClickUpTimeEntries");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Connect.ClientDbo", b =>
                {
                    b.Navigation("ApiKeys");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Core.CompanyDbo", b =>
                {
                    b.Navigation("IssuedInvoices");

                    b.Navigation("Projects");

                    b.Navigation("ReceivedInvoices");

                    b.Navigation("TimePackages");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.RoleDbo", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Identity.UserDbo", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("RefreshTokens");

                    b.Navigation("TimeEntries");

                    b.Navigation("TimePackageRates");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Projects.ProjectDbo", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.Projects.TaskDbo", b =>
                {
                    b.Navigation("ClickUpTask");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimeEntryDbo", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Webion.Stargaze.Pgsql.Entities.TimeTracking.TimePackageDbo", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
